#ifndef INTEGRAND_TTHORZ_3L1TAU_H
#define INTEGRAND_TTHORZ_3L1TAU_H

#include <string> // std::string
#include <vector> // std::vector<>
#include <functional> // std::function<>

#include "tthAnalysis/tthMEM/interface/me_ttHorZ_3l1tau_mg5.h" // me_ttHorZ_3l1tau_mg5
#include "tthAnalysis/tthMEM/interface/MeasuredEvent_3l1tau.h" // tthMEM_3l_1tau::MeasuredEvent
#include "tthAnalysis/tthMEM/interface/VariableManager_3l1tau.h" // VariableManager_3l1tau

#include "LHAPDF/LHAPDF.h" // LHAPDF::PDF

namespace tthMEM
{
  /**
   * @brief MEM integrand of the process tth, h->tautau, 3l1tau channel (LO)
   *
   * @todo
   *   - add methods for setting transfer functions
   *   - implement the integrand
   */
  class Integrand_ttHorZ_3l1tau
  {
  public:
    /**
     * @brief Simple constructor
     * @param sqrtS            Center of momentum energy
     * @param pdfName          Name of parton distribution function (pdf)
     * @param madgraphFileName Full path to madgraph5 file (param_card.dat)
     */
    Integrand_ttHorZ_3l1tau(const std::string & pdfName,
                            const std::string & madgraphFileName,
                            const VariableManager_3l1tau & vm);
    ~Integrand_ttHorZ_3l1tau();

    /**
     * @brief Set measured/reconstructed event as an input
     * @param measuredEvent The event
     * @return reference to this
     */
    Integrand_ttHorZ_3l1tau &
    setEvent(const MeasuredEvent_3l1tau & measuredEvent);

    /**
     * @brief Updates input parameters changed in the event
     */
    void
    renewInputs();

    /* simple setters */
    Integrand_ttHorZ_3l1tau &
    setCurrentME(ME_mg5_3l1tau currentME);

    Integrand_ttHorZ_3l1tau &
    setBJetTransferFunction(bool setTF);

    /**
     * @brief Evaluates the integrand
     * @param x Array of sampled values (generated by the integration lib)
     * @return Probability
     */
    double
    eval(const double * x) const;

    static const Integrand_ttHorZ_3l1tau * gIntegrand;
    ///< static pointer to this instance

  protected:
    const Vector beamAxis_;

    LHAPDF::PDF * pdf_;

    ME_mg5_3l1tau currentME_;
    mutable me_ttHorZ_3l1tau_mg5 * me_madgraph_[2];
    ///< @note mutable members can be modified by a const function (e.g. eval())
    ///< @note dynamic dispatch is tad bit slower because of additional vlookup

    double Q_;

    const MeasuredEvent_3l1tau * measuredEvent_;
    const VariableManager_3l1tau & vm_;

    double measuredVisMassSquared_; ///< mass of visible tau decay products
    LorentzVector hTauP4_,          ///< hadronic tau
                  complLeptP4_,     ///< complementary lepton coming from tau
                  leptP4_[2];       ///< leptons coming from top decay

    mutable std::vector<double *> mgMomenta_;
    std::vector<unsigned> mgMomentaIdxs_;

    /* reconstruction functionals */
    std::function<double(double)>                  nuHtauCosTheta_;
    std::function<double(double, double, double)>  nuLeptTauCosTheta_;
    std::function<double(double)>                  nuHtauEnergy_;
    std::function<double(double)>                  nuLTauEnergy_;
    std::function<LorentzVector(double, double,
                                double)>           nuHTau_;
    std::function<LorentzVector(double, double,
                                double, double)>   nuLTau_;
    std::function<double(const VectorSpherical &)> nuTopEnergy_[2];
    std::function<double(const LorentzVector &)>   bQuarkEnergy_[2];

    /* transfer functionals */
    std::function<double(double, double, double)>  bJetTF_;
    std::function<double(double)>                  bJetTFBound_[2];
    std::function<double(double, double)>          MET_TF_;

    /* Jacobi x phase space factors */
    std::function<double(const LorentzVector &,
                         double, double, double)>  tDecayJacobiFactor_[2];
    std::function<double(double)>                  hadTauPSJacobiFactor_;
    std::function<double(double, double)>          leptTauPSJacobiFactor_;

    /**
     * @brief Sets madgraph momenta
     * @param memVector_p4 The std::vector<LorentzVector> containing 4-vectors
     */
    void
    setMGmomenta(const std::vector<LorentzVector> & memVector_p4) const;
  };
}

#endif // INTEGRAND_TTHORZ_3L1TAU_H
